-- auto generated by generateSupabaseDevDatabase.ts
create extension if not exists timescaledb cascade;

create table "gameListings" (
"id" bigint primary key generated always as identity,
"developerUid" text,
"gameId" text,
"placeId" bigint,
"platformName" text,
"minAverageViews" bigint,
"budgetCents" bigint,
"creationDate" bigint,
"dueDate" bigint,
"description" text,
"rank" bigint,
"gameType" text
);

create table "creatorPlatformStats" (
"id" bigint primary key generated always as identity,
"creatorUid" text,
"platformUsername" text,
"platformName" text,
"platformPhotoUrl" text,
"creatorRating" jsonb,
"rate" jsonb,
"offeringDescription" text,
"deliveryEstimate" bigint,
"category" text,
"subscriberCount" bigint,
"averageViews" bigint,
"audienceGender" text,
"audienceAgeIs13Minus" bool,
"audienceAgeIs13to16" bool,
"audienceAgeIs17to24" bool,
"audienceAgeIs25Plus" bool,
"audienceLanguage" text,
"audienceCountry" text,
"allowRevisions" bool,
"allowLinkInBio" bool,
"questions" jsonb,
"featured" bool,
"acceptRobloxGameOffers" bool,
"acceptFortniteGameOffers" bool,
"hideFromCreatorsPage" bool
);

create table "gameListingApplications" (
"id" bigint primary key generated always as identity,
"gameListingId" bigint,
"gameId" text,
"creatorPlatformStatId" bigint not null references "creatorPlatformStats",
"creatorUid" text,
"developerUid" text,
"message" text,
"applicationDate" bigint,
"creatorAgencyUid" text
);

create table "socialSeedRobloxApi" (

"id" text primary key,
"placeId" bigint,
"ownerId" text,
"ownerRobloxUsername" text,
"ownerRobloxUserId" bigint,
"gameId" text,
"time" text,
"visits" bigint,
"ccus" bigint,
"hasGameZones" bool,
"upVotesPercentage" bigint,
"malePercentage" bigint,
"femalePercentage" bigint,
"ageStat" text
);

create table "robloxGameZoneImpressions" (

"time" timestamptz not null,
"gameZoneId" text,
"robloxUserId" text,
"adUnitId" text
);

select create_hypertable('"robloxGameZoneImpressions"', 'time');

create table "robloxGameZoneImpressionsApiKeys" (
"id" bigint primary key generated always as identity,
"uid" text,
"gameZonesIds" jsonb
);

create or replace function "fetch_social_seed_roblox_api"(place_id bigint, timeslice text, interval_input text)
returns table (
  "time" timestamptz,
  "visits" bigint,
  "ccus" bigint
)

language plpgsql
as $$
BEGIN

return query select 
  time_bucket(fetch_social_seed_roblox_api.timeslice::interval, "socialSeedRobloxApi"."time") AS date,
  "socialSeedRobloxApi"."visits",
  "socialSeedRobloxApi"."ccus"
from 
  "socialSeedRobloxApi"
where
  "placeId" = fetch_social_seed_roblox_api.place_id
  and "socialSeedRobloxApi"."time" >= NOW() - fetch_social_seed_roblox_api.interval_input::interval
order by 
  date;
  
END;
$$;

