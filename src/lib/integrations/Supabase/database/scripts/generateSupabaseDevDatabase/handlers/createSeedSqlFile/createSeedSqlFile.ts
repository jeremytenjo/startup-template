import path from 'path'

import assert from '@useweb/assert'

import type { GetTablesDataTablesProps } from '../getTablesData/getTablesData.js'
import createFile from '../../../../../../../../../devtools/utils/node/createFile.js'

export type CreateSeedSqlFileProps = { tables: GetTablesDataTablesProps }

export default async function createSeedSqlFile(props: CreateSeedSqlFileProps) {
  assert<CreateSeedSqlFileProps>({ props, requiredProps: ['tables'] })
  const seedFilePath = path.join(process.cwd(), 'supabase/seed.sql')
  let seedFileContents = '-- auto generated by generateSupabaseDevDatabase.ts \n\n'

  await Promise.all(
    props.tables.map(async (table) => {
      if (table.data.length === 0) {
        return
      }

      const columnProperties = Object.keys(table.schemaProps).filter((p) => p !== 'id')

      if (table.disablePrimaryKeyAutoGeneration) {
        columnProperties.unshift('id')
      }

      const columns = columnProperties.map((key) => `"${key}"`).join(', ')
      let insertIntoSql = `insert into "${table.name}" (
${columns}
    )
values `

      table.data.map((row, index) => {
        const islastRow = index === table.data.length - 1
        let valuesSql = `(`
        const rowKeys = columnProperties.map((p) => {
          const rawValue = row[p] ? JSON.stringify(row[p]) : 'null'
          const valueType = Array.isArray(rawValue)
            ? 'array'
            : table.schemaProps[p]?.type || 'string'
          const value = valueType?.includes?.('string')
            ? String(rawValue).replaceAll('"', "'")
            : valueType.includes?.('object')
            ? `'${rawValue}'`
            : valueType.includes?.('array')
            ? `'${rawValue}'`
            : rawValue

          return value
        })

        valuesSql += rowKeys.join(',\n')
        valuesSql += `)${islastRow ? ';\n' : ',\n'}`
        insertIntoSql += valuesSql
      })

      seedFileContents += `${insertIntoSql}\n\n`
    }),
  )

  await createFile({
    filePath: seedFilePath,
    fileContent: seedFileContents,
    nojs: true,
    overwrite: true,
  })
}

export type CreateSeedSqlFileReturn = ReturnType<typeof createSeedSqlFile>
