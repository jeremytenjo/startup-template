import{onCall as b}from"firebase-functions/v2/https";function r(e){var i;let t=[],o={cause:{props:e,missingProps:t}};if(!e.props&&!e.condition)throw new Error("props are undefined",o);if(e.props){if(e.requiredProps&&((i=e.requiredProps)!=null&&i.length)&&e.requiredProps.forEach(u=>{var a;let n=String(u);if(((a=e.props)==null?void 0:a[n])===void 0)throw new Error(`Missing required prop: ${n}`,o)}),t.length)throw new Error(`Missing props: ${t.join(",")}`,o)}else if(!Boolean(e.condition))throw new Error("condition failed",o)}import R from"firebase-functions/logger";import{HttpsError as w}from"firebase-functions/v2/https";import{PostHog as x}from"posthog-node";var c={id:void 0,initContig:{api_host:"https://app.posthog.com",autocapture:!1,capture_pageleave:!1,capture_pageview:!1,disable_session_recording:!0}};async function d(e){var t;if(r({props:e,requiredProps:["eventName","data"]}),((t=process==null?void 0:process.env)==null?void 0:t.NODE_ENV)==="production"&&c.id){let o=new x(c.id);o.capture({distinctId:"nodePostHog",event:e.eventName,properties:{...e.data,metadata:e.data}}),await o.shutdownAsync()}}async function m(e){r({props:e,requiredProps:["description","fnName"]}),d({eventName:"Error",data:{description:String(e.description),functionName:e.fnName,uid:e.uid||"",metadata:e==null?void 0:e.metadata}})}function p(e){r({props:e,requiredProps:["description","fnName"]});let t={fnName:String(e.fnName),description:String(e.description),metadata:e.metadata,uid:e.uid};if(m(t),e.throwHttpsError)throw R.error(t.fnName+` - ${t.description}`,t),new w("failed-precondition",t.description);if(R.error(t.fnName+` - ${t.description}`,t),e.throwError)throw new Error(`${t.fnName} - ${t.description}`)}import A from"firebase-functions/logger";import F from"firebase-admin";F.initializeApp();function f(){return{firebaseAdmin:F}}var l="users";var s="routes/deactivateAccount";async function h(e){var u,n;if(A.info(`START: ${s}`,{props:e}),r({props:e,requiredProps:["payload"]}),r({props:e.payload,requiredProps:["uid"]}),((u=e.payload)==null?void 0:u.uid)!==((n=e.authUser)==null?void 0:n.uid))throw new Error("User Id does not match Auth User Id");let{firebaseAdmin:t}=f();await t.auth().deleteUser(e.authUser.uid);let o=await t.firestore().collection(l).doc(e.authUser.uid).get().then(a=>{if(!a.exists)throw new Error("User Doc does not exist");return a.data()});await t.firestore().collection(l).doc(o.id).delete();let i={data:[{success:!0}]};return A.info(`END: ${s}`,{response:i}),i}async function P(e){if(r({props:e,requiredProps:["context"]}),e.context.route===s)try{return await h({authUser:e.authUser,payload:e.context.payload})}catch(t){throw new Error(`${s} - ${t}`,{cause:t==null?void 0:t.cause})}throw new Error(`Action doesn't exist - ${e.context.route}`,{cause:{props:e}})}async function y(e){if(e.context.route.startsWith("routes/"))return await P(e);throw new Error(`Route doesn't exist - ${e.context.route}`,{cause:{props:e}})}async function g(e){var t,o;try{return await y({authUser:e.request.auth,context:e.request.data})}catch(i){p({fnName:"miscFunctions",description:i,uid:(o=(t=e.request)==null?void 0:t.auth)==null?void 0:o.uid,throwHttpsError:!0,metadata:i==null?void 0:i.cause})}}var oe=b({memory:"1GiB"},async e=>await g({request:e}));export{oe as miscFunctions};
