import{onCall as N}from"firebase-functions/v2/https";function o(e){var n;let t=[],r={cause:{props:e,missingProps:t}};if(!e.props&&!e.condition)throw new Error("props are undefined",r);if(e.props){if(e.requiredProps&&((n=e.requiredProps)!=null&&n.length)&&e.requiredProps.forEach(u=>{var i;let a=String(u);if(((i=e.props)==null?void 0:i[a])===void 0)throw new Error(`Missing required prop: ${a}`,r)}),t.length)throw new Error(`Missing props: ${t.join(",")}`,r)}else if(!Boolean(e.condition))throw new Error("condition failed",r)}import x from"firebase-functions/logger";import{HttpsError as E}from"firebase-functions/v2/https";import{PostHog as b}from"posthog-node";var d={id:void 0,initContig:{api_host:"https://app.posthog.com",autocapture:!1,capture_pageleave:!1,capture_pageview:!1,disable_session_recording:!0}};async function p(e){var t;if(o({props:e,requiredProps:["eventName","data"]}),((t=process==null?void 0:process.env)==null?void 0:t.NODE_ENV)==="production"&&d.id){let r=new b(d.id);r.capture({distinctId:"nodePostHog",event:e.eventName,properties:{...e.data,metadata:e.data}}),await r.shutdownAsync()}}async function m(e){o({props:e,requiredProps:["description","fnName"]}),p({eventName:"Error",data:{description:String(e.description),functionName:e.fnName,uid:e.uid||"",metadata:e==null?void 0:e.metadata}})}function f(e){o({props:e,requiredProps:["description","fnName"]});let t={fnName:String(e.fnName),description:String(e.description),metadata:e.metadata,uid:e.uid};if(m(t),e.throwHttpsError)throw x.error(t.fnName+` - ${t.description}`,t),new E("failed-precondition",t.description);if(x.error(t.fnName+` - ${t.description}`,t),e.throwError)throw new Error(`${t.fnName} - ${t.description}`)}import C from"firebase-functions/logger";import w from"firebase-admin";w.initializeApp();function l(){return{firebaseAdmin:w}}var h="users";var s="routes/deactivateAccount";async function P(e){var u,a;if(C.info(`START: ${s}`,{props:e}),o({props:e,requiredProps:["payload"]}),o({props:e.payload,requiredProps:["uid"]}),((u=e.payload)==null?void 0:u.uid)!==((a=e.authUser)==null?void 0:a.uid))throw new Error("User Id does not match Auth User Id");let{firebaseAdmin:t}=l();await t.auth().deleteUser(e.authUser.uid);let r=await t.firestore().collection(h).where("id","==",e.authUser.uid).limit(1).get().then(i=>{if(i.empty)throw new Error("User Doc not found");return i.docs[0].data()});await t.firestore().collection(h).doc(r.id).delete();let n={data:[{success:!0}]};return C.info(`END: ${s}`,{response:n}),n}import F from"firebase-functions/logger";var c="routes/createConnectedAccount";async function y(e){F.info(`START: ${c}`,{props:e}),o({props:e,requiredProps:["payload"]}),o({props:e.payload,requiredProps:["name"]});let t={data:[{success:!0}]};return F.info(`END: ${c}`,{response:t}),t}async function A(e){if(o({props:e,requiredProps:["context"]}),e.context.route===s)try{return await P({authUser:e.authUser,payload:e.context.payload})}catch(t){throw new Error(`${s} - ${t}`,{cause:t==null?void 0:t.cause})}if(e.context.route===c)try{return await y({authUser:e.authUser,payload:e.context.payload})}catch(t){throw new Error(`${c} - ${t}`,{cause:t==null?void 0:t.cause})}throw new Error(`Action doesn't exist - ${e.context.route}`,{cause:{props:e}})}async function R(e){if(e.context.route.startsWith("routes/"))return await A(e);throw new Error(`Route doesn't exist - ${e.context.route}`,{cause:{props:e}})}async function g(e){var t,r;try{return await R({authUser:e.request.auth,context:e.request.data})}catch(n){f({fnName:"miscFunctions",description:n,uid:(r=(t=e.request)==null?void 0:t.auth)==null?void 0:r.uid,throwHttpsError:!0,metadata:n==null?void 0:n.cause})}}var ce=N({memory:"1GiB"},async e=>await g({request:e}));export{ce as miscFunctions};
